# -*- coding: utf-8 -*-
"""Makineögrenmesi3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fAIMZtpc519GVNFDJW0wFjoFmTtstHx4
"""

import pandas as pd
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import TfidfVectorizer

df = pd.read_csv('IMDB.csv')

print(df.head)

import matplotlib.pyplot as plt
#histogram grafiği
df.hist(bins=50,figsize=(20,15))
plt.show()

import seaborn as sns

## Korelasyon ısı haritası gösterimi
fig, ax = plt.subplots(figsize = (20, 12)) #plot boyutu
ax = sns.heatmap(df.corr(),cmap='RdBu_r',cbar=True,annot=True,linewidths=0.5,ax=ax)
plt.show()

#Metin özelliklerini vektörlere dönüştür
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['title'])

# Etiketleri (IMDB puanları) al
y = df['imdb_score'].apply(lambda x: int(x * 10))  # IMDb puanlarını 10'a çarparak tam sayıya dönüştür

# Eğitim ve test veri kümelerini oluştur
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Naive Bayes modelini eğit
model = MultinomialNB()
model.fit(X_train, y_train)

# Modelin doğruluğunu değerlendir
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model doğruluğu:", accuracy)

# Kullanıcıdan IMDb puanı girişi al
user_imdb_rating = float(input("Lütfen IMDb puanını girin (örn. 7.5): "))

# Kullanıcı tarafından belirtilen IMDb puanına en yakın ilk 5 filmi bul
recommended_movies = df[(df['imdb_score'] >= user_imdb_rating - 0.5) & (df['imdb_score'] <= user_imdb_rating + 0.5)].head(5)

# Tavsiye edilen filmleri görüntüle
print("Tavsiye edilen ilk 5 film:")
print(recommended_movies[['title', 'imdb_score']])