# -*- coding: utf-8 -*-
"""Makin3ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IHD0Xy2HwhEAca8CbR7tXqm38LiuGUkq
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
from datetime import datetime
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression

import pandas as pd

# Try reading the CSV file with different encodings
encodings = ['utf-8', 'latin-1', 'ISO-8859-1']

for encoding in encodings:
    try:
        df = pd.read_csv('/content/NetflixOriginals (1).csv', encoding=encoding)
        print(f"Successfully read the file with encoding: {encoding}")
        break  # Stop trying different encodings once successful
    except UnicodeDecodeError:
        print(f"Failed to read with encoding: {encoding}")

# Continue with your data analysis using the 'df' DataFrame

print(df.head)

# Korelasyon matrisini oluştur
correlation_matrix = df.corr()
# Korelasyon ısı haritasını oluştur
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
# Grafiği göster
plt.show()

# Histogram grafikleri çiz
df.hist(bins=50, figsize=(20, 15))
# Grafikleri göster
plt.show()

# Convert 'Premiere' to datetime and create a new feature 'Year'
df['Premiere'] = pd.to_datetime(df['Premiere'])
df['Year'] = df['Premiere'].dt.year

# Select features and target
numeric_features = ['Year', 'Runtime']
categorical_features = ['Genre', 'Language']

#test veri seti
X_train, X_test, y_train, y_test = train_test_split(df[numeric_features + categorical_features], df['IMDB Score'], test_size=0.2, random_state=42)

# Kategorik özellikler için ön işleme adımlarını tanımlayın
preprocessor = ColumnTransformer(
    transformers=[
        ('genre_language', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ],
    remainder='passthrough'
)

# Ön işleme ve doğrusal regresyon modeliyle bir işlem hattı oluşturun
model = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

print(df.isnull().sum())

# Veri çerçevesi oluşturma
df = pd.DataFrame(df)
df.describe(include = "all")

df.head()

# Train the model
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)

threshold_low = 2.5
threshold_high = 8.5
df['IMDB_Category'] = pd.cut(df['IMDB Score'], bins=[-float('inf'), threshold_low, threshold_high, float('inf')], labels=['Low', 'Medium', 'High'])
X_train, X_test, y_train, y_test = train_test_split(df[numeric_features + categorical_features], df['IMDB_Category'], test_size=0.2, random_state=42)


preprocessor = ColumnTransformer(
    transformers=[
        ('genre_language', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ],
    remainder='passthrough'
)
model = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(max_iter=1000))
])

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluate the model using accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Kesinlik: {accuracy}')

# For example:
new_data = pd.DataFrame({
    'Year': [2021],
    'Runtime': [120],
    'Genre': ['Action'],
    'Language': ['English']
})

prediction = model.predict(new_data)
print(f'Predicted IMDB Score for the new data: {prediction[0]}')

new_data = {
    'Year': int(input('Yılı Giriniz : ')),
    'Runtime': int(input('Filim Süresi Belirtin : ')),
    'Genre': input('Katogori Seciniz : '),
    'Language': input('Dil Secin : ')
}
new_data_df = pd.DataFrame([new_data])
new_data_pred = model.predict(new_data_df)
print(f'Eğitilmiş IMDB Puanı: {new_data_pred[0]}')
# Make predictions for all movies
df['Predicted_IMDB_Score'] = model.predict(df[numeric_features + categorical_features])
top_5_movies = df.sort_values(by='Predicted_IMDB_Score', ascending=False).head(5)

# Set the IMDB score threshold (adjust as needed)
imdb_threshold = 5.599487049469019




# Recommend movies with IMDB scores greater than or equal to the threshold
recommended_movies = df[df['IMDB Score'] >= imdb_threshold]

# Display the recommended movies
print(f'\nRecommended Movies with IMDB Score >= {imdb_threshold}:')
print(recommended_movies[['Title', 'Genre', 'Premiere', 'Runtime', 'IMDB Score']])