# -*- coding: utf-8 -*-
"""Makine ögrenmesi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IM0KM6eJs-HWKKNyE3aAtcer8IaK8ElA
"""

!pip install nltk

!pip install seaborn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
import string
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

# Veri import etme
df = pd.read_csv("comments.csv")
print(df)

df = pd.DataFrame(df)
print(df.head)

comments = df['Comment'].values
sentiments = df['Sentiment'].values

# Veri setindeki veri sayısını gösterme
num_rows, num_columns = df.shape
print(f"Veri setinde {num_rows} satır ve {num_columns} sütun bulunmaktadır.")

# Veri çerçevesi oluşturma
diabets_df = pd.DataFrame(df)
diabets_df.describe(include = "all")

# Veri sütunlarının özelliklerinin görüntülenmesi
df.info()

# Kaç tane eksik veri var?
df.isna().sum()

## sütunların numaratik grafiksel gösterimi
import matplotlib.pyplot as plt
import seaborn as sns

Numerical = ['Likes', 'Sentiment']
num_columns = len(Numerical)

fig, axs = plt.subplots(1, num_columns, figsize=(20, 4))

for i in range(num_columns):
    sns.boxplot(x=Numerical[i], data=df, ax=axs[i])
    axs[i].set_title(Numerical[i])

plt.show()

import matplotlib.pyplot as plt
#histogram grafiği
df.hist(bins=50,figsize=(20,15))
plt.show()

import seaborn as sns

## Korelasyon ısı haritası gösterimi
fig, ax = plt.subplots(figsize = (20, 12)) #plot boyutu
ax = sns.heatmap(df.corr(),cmap='RdBu_r',cbar=True,annot=True,linewidths=0.5,ax=ax)
plt.show()

#korelasyon tablosu
diabets_df.corr()

# Veri setini eğitim ve test kümelerine ayırma
X_train, X_test, y_train, y_test = train_test_split(df['Comment'], df['Sentiment'], test_size=0.2, random_state=42)

# Metin verilerini vektörleştirme
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train.fillna(''))
X_test_vec = vectorizer.transform(X_test.fillna(''))

# Duygu etiketlerini sayısal değerlere dönüştürme
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# Naive Bayes sınıflandırıcısını eğitme
nb_classifier = MultinomialNB()
nb_classifier.fit(X_train_vec, y_train_encoded)

# Test veri kümesi üzerinde tahmin yapma
y_pred = nb_classifier.predict(X_test_vec)

# Doğruluk ve diğer performans metriklerini değerlendirme
accuracy = metrics.accuracy_score(y_test_encoded, y_pred)
precision = metrics.precision_score(y_test_encoded, y_pred, average='weighted')
recall = metrics.recall_score(y_test_encoded, y_pred, average='weighted')
f1_score = metrics.f1_score(y_test_encoded, y_pred, average='weighted')

print("Kesinlik:", accuracy)
print("Hassasiyet:", precision)
print("Geri cekme:", recall)
print("F1 puanı:", f1_score)

# Duygu analizi için SentimentIntensityAnalyzer'ı yükleme
nltk.download('vader_lexicon')

# SentimentIntensityAnalyzer'ı oluşturma
sia = SentimentIntensityAnalyzer()

# Metin verisindeki kelimeleri ayırma ve duygusal içeriği belirleme
metin = df
metin = str(metin)
duygu_skoru = sia.polarity_scores(metin)

# Duygu skorunu inceleme
print(duygu_skoru)
# Negative,Neutral,Positive birleştirme degerlerini gösteririr

from textblob import TextBlob

# Kullanıcıdan  yorumu al
user_comment = input("Lütfen yorumunuzu girin: ")

# Yorumun duygu skorunu hesapla
blob = TextBlob(user_comment)
sentiment_score_ = blob.sentiment.polarity

# Duygu skorunu ekrana yazdır
print(f"Yorumun duygu skoru: {sentiment_score_}")

#Duygu skoru, -1 ile 1 arasında bir değer alır, -1 negatif duygu, 1 ise pozitif duygu anlamına gelir. 0 ise nötr bir duyguyu ifade eder.

sound quality is very bad